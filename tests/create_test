#! guile \
-e main -s
!#

(use-modules
 ((ice-9 textual-ports) #:prefix i9:)
 ((srfi srfi-43) #:prefix vec:) ;; Vector library
 ((ice-9 regex) #:prefix rx:)
 (ice-9 format)
 (ice-9 getopt-long)
 (json))

(define* (write-text path text #:key (append #f))
  (let ((file (open-file path (if append "a" "w"))))
    (i9:put-string file text)
    (close-port file)))
            
(define (read-text path)
  (let* ((file (open-file path "r"))
         (text (i9:get-string-all file)))
    (close-port file)
    text))

(define *default-libs*
  '(
    "#include <stdio.h>"
    "#include <stdlib.h>"))

(define *additional-libs*
  '(
    "#include \"new.h\""
    "#include \"num.h\""))

(define *headers-decl* (string-concatenate
                   (map (lambda (x) (string-concatenate (list x "\n")))
                        (map (lambda (x) x) (append *default-libs* *additional-libs*)))))

(define *test-func-decl*
  "
int
test (const int id, const char* msg, const num_t computed, const num_t expected)
{
    if (! num_eq(computed, expected))
    {
        double c[2];
        double e[2];

        num_to_double(c, computed);
        num_to_double(e, expected);
        
        printf(\"[id=%02d] %s [ERROR]: expected=(%g, %g), computed=(%g, %g)\\n\",
               id, msg, e[0], e[1], c[0], c[1]);

        return 1;
    }

    return 0;
}
")

(define (get-values x)
  (substring x 1 (- (string-length x) 1)))



(define (test fname)
  (format #f
          (string-concatenate
           (vec:vector->list
            (vec:vector-map
             (lambda (_ el)
               (format #f "
    x = new(num, ~a);
    y = new(num, ~a);
    computed = ~a(x, y);
    expected = new(num, ~a);
    code = test(id, \"~a(~a, ~a)\", computed, expected);
    delete(x), delete(y), delete(expected);
    if (code == 1) exit(1);
    id++;
"
                       (get-values (cdr (assoc "op1" el)))
                       (get-values (cdr (assoc "op2" el)))
                       (cdr (assoc "fn" el))
                       (get-values (cdr (assoc "expect" el)))
                       (cdr (assoc "fn" el))
                       (cdr (assoc "op1" el))
                       (cdr (assoc "op2" el))))
             (json-string->scm
              (read-text fname)))))))

(define (main-code fpath)
  (format #f
          "
~a

~a

int main (void)
{
    int code, id = 1;
    num_t x, y, computed, expected;

    ~a

    return (id-1); /* Return the number of passed tests */

}" 
          
          *headers-decl*
          *test-func-decl*
          (test fpath)))

;;;;;;;;;;;;;;;;;;;
;; Main function ;;
;;;;;;;;;;;;;;;;;;;
(define help-message "\
create_test [options] --input <input> --output <output>
  -h, --help       Display this help
  -i, --input      Input JSON file
  -o, --output     Output C file
")

(define (main args)
  (let* ((option-spec '((help   (single-char #\h) (value #f))
                        (input  (single-char #\i) (value #t) (required? #t))
                        (output (single-char #\o) (value #t) (required? #t))))
         (options (getopt-long args option-spec))
         (help-wanted (option-ref options 'help #f))
         (infilename (option-ref options 'input #f))
         (outfilename (option-ref options 'output #f)))
    (if (or (= 1 (length args)) help-wanted)
        (display help-message)        
        (let* ((infpath (canonicalize-path infilename)))
          (format #t "Generating test file from ~a\n" infilename)
          (write-text outfilename (main-code infpath))
          (format #t "~a saved.\n" outfilename)))))
